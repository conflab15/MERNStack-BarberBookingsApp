{"ast":null,"code":"import axios from 'axios';\nexport const listBookings = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'BOOKING_LIST_REQUEST'\n    });\n    const {\n      customerLogin: {\n        customerInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: customerInfo.token\n      }\n    };\n    const {\n      data\n    } = await axios.get('/api/bookings', config);\n    dispatch({\n      type: 'BOOKING_LIST_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'BOOKING_LIST_FAIL',\n      payload: error.message\n    });\n  }\n};\nexport const personalBookingList = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'PERSONAL_BOOKING_LISTS_REQUEST'\n    });\n    const {\n      customerLogin: {\n        customerInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: customerInfo.token\n      }\n    };\n    const {\n      data\n    } = await axios.get('/api/bookings/personalbookings', config);\n    dispatch({\n      type: 'PERSONAL_BOOKING_LISTS_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    //Pass an error message to the state\n    dispatch({\n      type: 'PERSONAL_BOOKING_LIST_FAIL',\n      payload: error.message\n    });\n  }\n};\nexport const createNewBooking = (style, bookingTime, bookingDate, price) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'CREATING_BOOKING_REQUEST'\n    });\n    const {\n      customerLogin: {\n        customerInfo\n      }\n    } = getState(); //Retrieving the active customer\n\n    const config = {\n      headers: {\n        Authorization: customerInfo.token //Token to authorize the session through JWT\n\n      }\n    }; //Fetching data from the API, not all booking data is here because it is auto assigned as false for some properties...\n\n    const {\n      data\n    } = await axios.post('/api/bookings/create', {\n      style,\n      bookingTime,\n      bookingDate,\n      price\n    }, config); //The response from this action is being populated into a payload\n\n    dispatch({\n      type: 'CREATING_BOOKING_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    //Sending an error message\n    dispatch({\n      type: 'CREATING_BOOKING_FAIL',\n      payload: error.message\n    });\n  }\n};\nexport const confirmBooking = booking => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'CONFIRM_BOOKING_REQUEST'\n    });\n    const {\n      customerLogin: {\n        customerInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: customerInfo.token\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/bookings/${booking._id}`, {\n      booking\n    }, config);\n    dispatch({\n      type: 'CONFIRM_BOOKING_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'CONFIRM_BOOKING_FAIL',\n      payload: error.message\n    });\n  }\n};\nexport const bookingByDay = date => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: 'BOOKING_DAY_LIST_REQUEST'\n    });\n    const {\n      customerLogin: {\n        customerInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: customerInfo.token\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/bookings/day/${date}`, config);\n    dispatch({\n      type: 'BOOKING_DAY_LIST_SUCCESS',\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'BOOKING_DAY_LIST_FAIL',\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/University Work/Year 2 (Level 5)/UX and Full Stack Dev/FixedBarberShop/BarberWebApp/barberwebapp/frontend/src/actions/bookingActions.js"],"names":["axios","listBookings","dispatch","getState","type","customerLogin","customerInfo","config","headers","Authorization","token","data","get","payload","error","message","personalBookingList","createNewBooking","style","bookingTime","bookingDate","price","post","confirmBooking","booking","put","_id","bookingByDay","date"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\nexport const listBookings = () => async (dispatch, getState) => {\r\n\r\n    try {\r\n        dispatch({type: 'BOOKING_LIST_REQUEST'})\r\n\r\n        const {customerLogin: {customerInfo}} = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                Authorization: customerInfo.token\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.get('/api/bookings', config)\r\n\r\n        dispatch({type: 'BOOKING_LIST_SUCCESS', payload: data})\r\n    }\r\n    catch(error){\r\n        dispatch({\r\n            type: 'BOOKING_LIST_FAIL',\r\n            payload: error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const personalBookingList = () => async (dispatch, getState) => {\r\n    \r\n    try {\r\n        dispatch({type: 'PERSONAL_BOOKING_LISTS_REQUEST'})\r\n\r\n        const {customerLogin: {customerInfo}} = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: customerInfo.token\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.get('/api/bookings/personalbookings', config)\r\n\r\n        dispatch({type: 'PERSONAL_BOOKING_LISTS_SUCCESS', payload: data})\r\n    }\r\n    catch(error){\r\n        //Pass an error message to the state\r\n        dispatch({\r\n            type: 'PERSONAL_BOOKING_LIST_FAIL',\r\n            payload: error.message\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport const createNewBooking = (style, bookingTime, bookingDate, price) => async (dispatch, getState) =>{\r\n\r\n    try{\r\n        dispatch({type: 'CREATING_BOOKING_REQUEST'})\r\n\r\n        const {customerLogin:{customerInfo}} = getState() //Retrieving the active customer\r\n\r\n        const config = {\r\n            headers:{\r\n                Authorization: customerInfo.token //Token to authorize the session through JWT\r\n            }\r\n        }\r\n        \r\n        //Fetching data from the API, not all booking data is here because it is auto assigned as false for some properties...\r\n        const {data} = await axios.post('/api/bookings/create',{style, bookingTime, bookingDate, price}, config)\r\n\r\n        //The response from this action is being populated into a payload\r\n        dispatch({type: 'CREATING_BOOKING_SUCCESS', payload: data})\r\n    }\r\n    catch(error){\r\n        //Sending an error message\r\n        dispatch({\r\n            type: 'CREATING_BOOKING_FAIL',\r\n            payload: error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const confirmBooking = (booking) => async (dispatch, getState) =>{\r\n\r\n    try{\r\n        dispatch({type: 'CONFIRM_BOOKING_REQUEST'})\r\n\r\n        const {customerLogin:{customerInfo}} = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                Authorization: customerInfo.token\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.put(`/api/bookings/${booking._id}`,{booking}, config)\r\n\r\n        dispatch({type: 'CONFIRM_BOOKING_SUCCESS', payload: data})\r\n    }\r\n    catch(error){\r\n        dispatch({\r\n            type: 'CONFIRM_BOOKING_FAIL',\r\n            payload: error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const bookingByDay = (date) => async (dispatch, getState) =>{\r\n\r\n    try{\r\n        dispatch({type: 'BOOKING_DAY_LIST_REQUEST'})\r\n\r\n        const {customerLogin:{customerInfo}} = getState()\r\n\r\n        const config = {\r\n            headers:{\r\n                Authorization: customerInfo.token\r\n            }\r\n        }\r\n\r\n        const {data} = await axios.get(`/api/bookings/day/${date}`, config)\r\n\r\n        dispatch({type: 'BOOKING_DAY_LIST_SUCCESS', payload: data})\r\n    }\r\n    catch(error){\r\n        dispatch({\r\n            type: 'BOOKING_DAY_LIST_FAIL',\r\n            payload: error.message\r\n        })\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}